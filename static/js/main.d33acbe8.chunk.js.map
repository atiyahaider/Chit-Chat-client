{"version":3,"sources":["components/SVG/Logo.jsx","components/home/Home.jsx","constants.js","components/banner/Banner.jsx","components/spinner/Spinner.jsx","components/modal/Modal.jsx","hooks/useError.js","hooks/useModal.js","components/login/Login.jsx","components/register/Register.jsx","components/forgotPassword/ForgotPassword.jsx","hooks/useAxios.js","components/resetPassword/ResetPassword.jsx","components/newRoom/NewRoom.js","hooks/useSocket.js","hooks/useNewRoom.js","hooks/useLogout.js","components/rooms/Rooms.jsx","components/members/Members.jsx","components/messages/Messages.jsx","utils/formatDate.js","components/newMessage/NewMessage.jsx","hooks/useCheckboxes.js","components/chat/Chat.jsx","components/updateProfile/UpdateProfile.jsx","components/changePassword/ChangePassword.jsx","components/manageRooms/ManageRooms.jsx","components/notFound/NotFound.jsx","App.js","index.js"],"names":["Logo","width","height","xmlns","viewBox","className","id","cx","cy","r","fx","fy","offset","stopColor","rx","ry","fill","d","x","y","fontSize","Home","to","BASE_URL","API_URL","EMAIL_REGEX","PASSWORD_REGEX","EmojiOptions","convertShortnames","convertUnicode","convertAscii","style","top","Banner","displayMenu","email","name","logout","roomId","appendRoomId","onClick","Spinner","loading","size","color","Modal","showModal","closeModal","modalContent","callback","isOpen","contentLabel","onRequestClose","shouldCloseOnOverlayClick","shouldFocusAfterRender","shouldReturnFocusAfterClose","ariaHideApp","overlay","backgroundColor","content","background","padding","left","right","bottom","marginRight","transform","type","useError","errorDescription","err","response","data","error","statusText","message","sessionExpired","status","useModal","setModalContent","useState","setShowModal","useEffect","Login","setEmail","password","setPassword","isLoading","setIsLoading","sessionErr","setSessionErr","history","useHistory","location","useLocation","btnRef","useRef","queryString","parse","search","value","onChange","e","target","ref","preventDefault","current","setAttribute","trim","test","axios","get","params","then","res","localStorage","setItem","token","push","catch","removeAttribute","pointerEvents","Register","setName","confirmPassword","setConfirmPassword","post","ForgotPassword","useAxios","getItem","create","baseURL","headers","Authorization","ResetPassword","sessionError","setSessionError","useParams","authAxios","NewRoom","createNewRoom","room","setRoom","useSocket","setNoOfMsgs","userRooms","setUserRooms","rooms","setRooms","members","setMembers","messages","setMessages","socketRef","socketIOClient","query","on","index","findIndex","slice","typing","prev","deletedMessages","map","msg","includes","_id","date","length","disconnect","broadcastLogin","emit","joinRoom","leaveRoom","Promise","resolve","emitTyping","emitStopTyping","emitMessage","console","log","reject","emitClearChat","emitDeleteMessages","emitLogout","removeItem","broadcastOffline","offline","emitNewRoom","emitEdittedRoomName","emitDeleteRoom","updateProfile","useNewRoom","a","useLogout","Rooms","handleJoinRoom","persist","put","key","React","memo","i","deleteMessages","checkboxes","handleCheckboxChange","chatDiv","document","getElementById","scrollTop","scrollHeight","checked","today","Date","setHours","date2","valueOf","toLocaleTimeString","toLocaleString","formatDate","indexOf","src","alt","controls","allowedFormats","linkTarget","emojify","NewMessage","typingTimer","sendMessage","handleEmitTyping","handleEmitStopTyping","uploadImage","setMessage","showEmojiPicker","setShowEmojiPicker","sendBtnRef","imageFileRef","imageBtnRef","onKeyPress","clearTimeout","onKeyUp","setTimeout","files","accept","display","click","set","onSelect","emoji","native","perLine","emojiSize","showPreview","showSkinTones","useCheckboxes","setDeleteMessages","selectMessages","setSelectMessages","setCheckboxes","selectCheckboxes","isSelected","Object","keys","forEach","checkbox","prevState","filter","reduce","boxes","values","Chat","admin","setAdmin","noOfMsgs","showDeleteButtons","handleSelectAll","handleDeselectAll","handleCancelDelete","checkboxSelected","roomData","handleLeaveRoom","clearChat","deleteSelectedMessages","chkboxArr","title","imageFile","match","reader","FileReader","addEventListener","image","result","imageType","readAsDataURL","UpdateProfile","handleUpdate","goBack","ChangePassword","oldPassword","setOldPassword","newPassword","setNewPassword","ManageRooms","selectedRoomId","setSelectedRoomId","edit","setEdit","editedRoom","setEditedRoom","clearEdit","handleCancelEdit","handleSaveRoom","deleteRoom","handleEditRoom","handleClearChat","handleDeleteRoom","NotFound","App","basename","process","exact","path","ReactDOM","render"],"mappings":"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","file":"static/js/main.d33acbe8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './logo.css';\r\n\r\nconst Logo = ({ width, height }) => {\r\n    return (  \r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={width} height={height} viewBox=\"0 0 20 10\" className=\"shadow\">\r\n            <defs>\r\n                <radialGradient id=\"gradPurple\" cx=\"65%\" cy=\"50%\" r=\"50%\" fx=\"80%\" fy=\"50%\">\r\n                    <stop offset=\"0%\" stopColor=\"#e2d0e2\" />\r\n                    <stop offset=\"60%\" stopColor=\"#c5a0c5\" />\r\n                    <stop offset=\"100%\" stopColor=\"#8e578e\" />\r\n                </radialGradient>\r\n            </defs>\r\n            <g id=\"shape8\">\r\n                <ellipse cx=\"11\" cy=\"5\" rx=\"9\" ry=\"4.5\" fill=\"url(#gradPurple)\" />\r\n                <path d=\"M3,6.5 Q3,8.5 0,8.25 Q3.25,10.2 5,8.25\" fill=\"#8e578e\" />\r\n                <text x=\"4.5\" y=\"6.2\" fontSize=\"3.25px\" fill=\"white\">\r\n                    Chit Chat\r\n                </text>\r\n            </g>\r\n        </svg>\r\n    );\r\n}\r\n \r\nexport default Logo;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Logo from '../SVG/Logo';\r\n\r\nimport './home.css';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className='container'>\r\n            <h1 id='welcome' className='heading'>\r\n                Welcome to <Logo width='110' height='50' />\r\n            </h1>\r\n            <p id='intro'>Join chatrooms and chat with people on various topics and interests,\r\n               or create your own chatroom.</p>\r\n            <p id='loginMsg'><Link to=\"/login\"><button className='largeButton'>Login</button></Link>to start chatting</p>\r\n            <p>Don't have an account yet? <Link to=\"/register\">Register now</Link></p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","export  const LOCAL_STORAGE = 'ChitChat';\r\n///export  const BASE_URL = 'http://localhost:8080';\r\nexport  const BASE_URL = 'https://chit-chat12.herokuapp.com';\r\nexport  const API_URL = BASE_URL + '/api';\r\n\r\nexport const EMAIL_REGEX = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n// ^\tThe password string will start this way\r\n// (?=.*[a-z])\tThe string must contain at least 1 lowercase alphabetical character\r\n// (?=.*[A-Z])\tThe string must contain at least 1 uppercase alphabetical character\r\n// (?=.*[0-9])\tThe string must contain at least 1 numeric character\r\n// (?=.*[!@#$%^&*])\tThe string must contain at least one special character, but we are escaping reserved RegEx characters to avoid conflict\r\n// (?=.{8,})\tThe string must be eight characters or longer        \r\nexport const PASSWORD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})/;\r\n\r\nexport  const EmojiOptions = {\r\n            convertShortnames: true,\r\n            convertUnicode: true,\r\n            convertAscii: true,\r\n            style: {\r\n                height: 20,\r\n                top: 0\r\n            }\r\n        };\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Logo from '../SVG/Logo';\r\nimport './banner.css';\r\n\r\nconst Banner = ({ displayMenu, email, name, logout, roomId }) => {\r\n\r\n    const appendRoomId = () => {\r\n        return roomId ? '/' + roomId : '';\r\n    }\r\n\r\n    return (  \r\n    <div className='banner'>\r\n        <Logo width='80' height='40' />\r\n        <p>{name ? 'Welcome ' + name : null}</p>\r\n        {displayMenu && \r\n            <div id='menu'>\r\n                <div id='bar1' className='bar'></div>\r\n                <div id='bar2' className='bar'></div>\r\n                <div id='bar3' className='bar'></div>\r\n                <div className='menuContent'>\r\n                    <Link className='menuLink' to={ '/updateProfile' + appendRoomId() }>Update Profile</Link>\r\n                    <Link className='menuLink' to={ '/changePassword/' + email + '/' + name + appendRoomId() }>Change Password</Link>\r\n                    <Link className='menuLink' to={ '/manageRooms' + appendRoomId() }>Manage Rooms</Link>\r\n                    <div className='menuLink' onClick={logout}>Logout</div>\r\n                </div>            \r\n            </div>\r\n        }\r\n    </div>\r\n\r\n    );\r\n}\r\n \r\nexport default Banner;","import React from 'react';\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\nimport './spinner.css';\r\n\r\nconst Spinner = ({loading}) => {\r\n    return (\r\n        <div className='loading'>\r\n            <ClipLoader size={25} color={'#41747c'} loading={loading} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport ReactModal from 'react-modal';\r\n\r\nimport './modal.css';\r\n\r\nconst Modal = ({showModal, closeModal, modalContent, callback}) => {\r\n    return ( \r\n        <ReactModal\r\n            isOpen={showModal}\r\n            contentLabel=\"Error Message\"\r\n            onRequestClose={closeModal}\r\n            shouldCloseOnOverlayClick={true}\r\n            shouldFocusAfterRender={false}\r\n            shouldReturnFocusAfterClose={false}\r\n            ariaHideApp={false}\r\n            style={{\r\n                overlay: {\r\n                    backgroundColor: \"rgb(238, 245, 246, 0.75)\"\r\n                },\r\n                content: {\r\n                    background: \"#41747c\",\r\n                    width: '400px',\r\n                    height: '150px',\r\n                    padding: '5px',\r\n                    top: '50%',\r\n                    left: '50%',\r\n                    right: 'auto',\r\n                    bottom: 'auto',\r\n                    marginRight: '-50%',\r\n                    transform: 'translate(-50%, -50%)'                            \r\n                }\r\n            }}\r\n        >\r\n            <div id='innerModalDiv'>\r\n                <div id='closeDiv' onClick={closeModal}>\r\n                    <p>{modalContent.type}</p>\r\n                    <i id='close' className='fas fa-times' />\r\n                </div>\r\n                <div id='modalContent'>\r\n                    <div id='modalText'>\r\n                        <div>{ modalContent.content }\r\n                        </div>\r\n                    </div>\r\n                    {(modalContent.type === 'DeleteAll' || modalContent.type === 'Delete') &&\r\n                        <div className='modalButtons'>\r\n                            <button onClick={callback}>Yes</button>\r\n                            <button onClick={closeModal}>Cancel</button>\r\n                        </div>\r\n                    }\r\n                    {modalContent.type === 'Information' &&\r\n                        <div className='modalButtons'>\r\n                            <button onClick={callback}>OK</button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </ReactModal>\r\n    );\r\n}\r\n \r\nexport default Modal;","const useError = () => {\r\n    const errorDescription = (err) => {\r\n        if (err.response) {\r\n            // The request was made and the server responded with a status code\r\n            if (typeof err.response.data.error === 'string')    //for user defined errors\r\n                return err.response.data.error;\r\n            else    \r\n                return 'Something went wrong. ' + err.response.statusText;    //for server errors\r\n        } \r\n        else {\r\n            // The request was made but no response was received\r\n            return 'Something went wrong. ' + err.message;    //for server errors\r\n        } \r\n    }\r\n\r\n    const sessionExpired = (err) => {\r\n        if (err.response && err.response.status === 401) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return { errorDescription, sessionExpired };\r\n}\r\n \r\nexport default useError;","import { useState, useEffect } from 'react';\r\n\r\nconst useModal = (modalContent, setModalContent) => {\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (modalContent.content !== '') {\r\n            setShowModal(true);\r\n        }\r\n    }, [modalContent]);\r\n\r\n    const closeModal = () => {\r\n        setShowModal(false);\r\n        setModalContent({type: '', content: ''});    \r\n    }\r\n\r\n    return [showModal, closeModal];\r\n}\r\n \r\nexport default useModal;","import React, { useState, useRef, useEffect } from 'react';\r\nimport { Link, useHistory, useLocation } from 'react-router-dom';\r\nimport queryString from 'query-string';\r\nimport axios from 'axios';\r\nimport { API_URL, LOCAL_STORAGE, EMAIL_REGEX } from '../../constants';\r\nimport './login.css';\r\n\r\n//components\r\nimport Banner from '../banner/Banner';\r\nimport Spinner from '../spinner/Spinner';\r\nimport Modal from '../modal/Modal';\r\n\r\n//hooks\r\nimport useError from '../../hooks/useError';\r\nimport useModal from '../../hooks/useModal';\r\n\r\nconst Login = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [modalContent, setModalContent] = useState({type:'', content: ''});\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [sessionErr, setSessionErr] = useState('');\r\n    \r\n    //hooks\r\n    const { errorDescription } = useError();\r\n    const [showModal, closeModal] = useModal(modalContent, setModalContent);\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const btnRef = useRef();\r\n\r\n    useEffect(() => {\r\n        setSessionErr(queryString.parse(location.search).err);\r\n    }, [location.search])\r\n\r\n    const validate = () => {\r\n        if (email.trim() === '') {\r\n            setModalContent({ type: 'Error', content: 'Please enter an email address' });\r\n            return false;\r\n        }\r\n        //validate email\r\n        if (!EMAIL_REGEX.test(email)) {\r\n                setModalContent({ type: 'Error', content: 'Invalid email address' });\r\n                return false;\r\n        }\r\n        if (password.trim() === '') {\r\n            setModalContent({ type: 'Error', content: 'Please enter the password' });\r\n            return false;\r\n        }\r\n        \r\n        setModalContent({type:'', content: ''});\r\n        return true;\r\n    }\r\n\r\n    const handleLogin = e => {\r\n        e.preventDefault();\r\n        setSessionErr('');\r\n\r\n        //disable button\r\n        if(btnRef.current){\r\n            btnRef.current.setAttribute('disabled', 'disabled');\r\n        }\r\n\r\n        if (!validate()) {\r\n            if(btnRef.current){\r\n                btnRef.current.removeAttribute('disabled');\r\n            }\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        axios.get(API_URL + '/login', {\r\n            params: {\r\n                email,\r\n                password\r\n            }\r\n        })\r\n        .then(res => {\r\n            //if valid login, store token in local storage\r\n            localStorage.setItem(LOCAL_STORAGE, res.data.token);\r\n            setIsLoading(false);\r\n            history.push('/rooms');\r\n        })\r\n        .catch(err => {\r\n            setIsLoading(false);\r\n            if(btnRef.current){\r\n                btnRef.current.removeAttribute('disabled');\r\n            }\r\n            setModalContent({ type: 'Error', content: errorDescription(err) });\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Banner displayMenu={false} />\r\n            <div className='container'>\r\n                <h1 className='heading'>Login</h1>\r\n                { sessionErr !== '' ? <div className='errorDiv'>{sessionErr}</div>\r\n                    : <Spinner loading={isLoading} />\r\n                }\r\n\r\n                <form className='formFields'>\r\n                    <div className='inputField'>\r\n                        <label>Email</label>\r\n                        <input id='email' type='email' value={email} onChange={e => setEmail(e.target.value)}/>\r\n                    </div>\r\n                    <div className='inputField'>\r\n                        <label>Password</label>\r\n                        <input id='password' type='password' value={password} onChange={e => setPassword(e.target.value)}/>\r\n                    </div>\r\n                    <button className='largeButton' ref={btnRef} onClick={handleLogin}>Login</button>\r\n                </form>\r\n                <p className='footNote'>\r\n                    <Link to='/forgotPassword' style={ isLoading ? {pointerEvents: 'none'} : null }>Forgot password?</Link>\r\n                </p>\r\n                <p className='footNote'>Don't have an account?&nbsp;\r\n                    <Link to='/register' style={ isLoading ? {pointerEvents: 'none'} : null }>Register</Link>\r\n                </p>\r\n\r\n                {modalContent.content !== '' && <Modal showModal={showModal} closeModal={closeModal} modalContent={modalContent} />}\r\n            </div>\r\n        </div>        \r\n    );\r\n}\r\n export default Login;","import React, { useState, useRef } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { API_URL, EMAIL_REGEX, PASSWORD_REGEX } from '../../constants';\r\n\r\n//components\r\nimport Banner from '../banner/Banner';\r\nimport Spinner from '../spinner/Spinner';\r\nimport Modal from '../modal/Modal';\r\n\r\n//hooks\r\nimport useError from '../../hooks/useError';\r\nimport useModal from '../../hooks/useModal';\r\n\r\nconst Register = () => {\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [modalContent, setModalContent] = useState({type:'', content: ''});\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    //hooks\r\n    const [showModal, closeModal] = useModal(modalContent, setModalContent);\r\n    const { errorDescription } = useError();\r\n    const history = useHistory();\r\n    const btnRef = useRef();\r\n\r\n    const validate = () => {\r\n        if (name.trim() === '') {\r\n            setModalContent({ type: 'Error', content: 'Please enter your name' });\r\n            return false;\r\n        }\r\n        \r\n        if (email.trim() === '') {\r\n            setModalContent({ type: 'Error', content: 'Please enter an email address' });\r\n            return false;\r\n        }\r\n        if (!EMAIL_REGEX.test(email)) {\r\n            setModalContent({ type: 'Error', content: 'Invalid email address' });\r\n            return false;\r\n        }\r\n\r\n        if (password.trim() === '') {\r\n            setModalContent({ type: 'Error', content: 'Please enter the password' });\r\n            return false;\r\n        }\r\n        if (!PASSWORD_REGEX.test(password)) {\r\n            setModalContent({ type: 'Error', content: 'Password must have at least 1 lowercase and 1 uppercase letter, 1 number, 1 special character (!@#$%^&*), and must be at least 8 characters long.' });\r\n            return false;\r\n        }\r\n\r\n        if (confirmPassword.trim() === '') {\r\n            setModalContent({ type: 'Error', content: 'Please confirm the password' });\r\n            return false;\r\n        }\r\n        if (password.trim() !== confirmPassword.trim()) {\r\n            setModalContent({ type: 'Error', content: 'Passwords do not match' });\r\n            return false;\r\n        }\r\n\r\n        setModalContent({type:'', content: ''});\r\n        return true;\r\n    }\r\n\r\n    const handleRegister = e => {\r\n        e.preventDefault();\r\n        if(btnRef.current){\r\n            btnRef.current.setAttribute('disabled', 'disabled');\r\n        }\r\n\r\n        if (!validate()) {\r\n            if(btnRef.current){\r\n                btnRef.current.removeAttribute('disabled');\r\n            }\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        axios.post(API_URL + '/register', \r\n        {\r\n            name,\r\n            email,\r\n            password\r\n        })\r\n        .then(() => {\r\n            setIsLoading(false);\r\n            history.push('/login');\r\n        })\r\n        .catch(err => {\r\n            setIsLoading(false);\r\n            if(btnRef.current){\r\n                btnRef.current.removeAttribute('disabled');\r\n            }\r\n            setModalContent({ type: 'Error', content: errorDescription(err) });\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Banner displayMenu={false} />\r\n            <div className='container'>\r\n                <h1 className='heading'>Register</h1>\r\n                <Spinner loading={isLoading} />\r\n\r\n                <form className='formFields'>\r\n                    <div className='inputField'>\r\n                        <label>Name</label>\r\n                        <input id='name' type='text' value={name} onChange={e => setName(e.target.value)}/>\r\n                    </div>\r\n                    <div className='inputField'>\r\n                        <label>Email</label>\r\n                        <input id='email' type='email' value={email} onChange={e => setEmail(e.target.value)}/>\r\n                    </div>\r\n                    <div className='inputField'>\r\n                        <label>Password</label>\r\n                        <input id='password' type='password' value={password} onChange={e => setPassword(e.target.value)}/>\r\n                    </div>\r\n                    <div className='inputField'>\r\n                        <label>Confirm Password</label>\r\n                        <input id='confirmPassword' type='password' value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)}/>\r\n                    </div>\r\n                    <button className='largeButton' ref={btnRef} onClick={handleRegister}>Register</button>\r\n                </form>\r\n                <p className='footNote'>Already have an account?&nbsp;\r\n                    <Link to='/login' style={ isLoading ? {pointerEvents: 'none'} : null }>Login</Link>\r\n                </p>\r\n\r\n                {modalContent.content !== '' && <Modal showModal={showModal} closeModal={closeModal} modalContent={modalContent} />}\r\n            </div>\r\n        </div>  \r\n    )\r\n}\r\n export default Register;","import React, { useState, useRef } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { API_URL, EMAIL_REGEX } from '../../constants';\r\n\r\n//components\r\nimport Banner from '../banner/Banner';\r\nimport Spinner from '../spinner/Spinner';\r\nimport Modal from '../modal/Modal';\r\n\r\n//hooks\r\nimport useError from '../../hooks/useError';\r\nimport useModal from '../../hooks/useModal';\r\n\r\nconst ForgotPassword = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [modalContent, setModalContent] = useState({type:'', content: ''});\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    \r\n    //hooks\r\n    const { errorDescription } = useError();\r\n    const [showModal, closeModal] = useModal(modalContent, setModalContent);\r\n    const history = useHistory();\r\n    const btnRef = useRef();\r\n\r\n    const validate = () => {\r\n        if (email.trim() === '') {\r\n            setModalContent({ type: 'Error', content: 'Please enter an email address' });\r\n            return false;\r\n        }\r\n        //validate email\r\n        if (!EMAIL_REGEX.test(email)) {\r\n                setModalContent({ type: 'Error', content: 'Invalid email address' });\r\n                return false;\r\n        }\r\n        \r\n        setModalContent({type:'', content: ''});\r\n        return true;\r\n    }\r\n\r\n    const sendEmail = e => {\r\n        e.preventDefault();\r\n        if(btnRef.current){\r\n            btnRef.current.setAttribute('disabled', 'disabled');\r\n        }\r\n\r\n        if (!validate()) {\r\n            if(btnRef.current){\r\n                btnRef.current.removeAttribute('disabled');\r\n            }\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        axios.post(API_URL + '/forgotPassword', \r\n        {\r\n            email\r\n        })\r\n        .then((res) => {\r\n            setIsLoading(false);\r\n            setModalContent({ type: 'Information', content: 'An email has been sent to reset the password. Please follow the link in the email. The link will expire in an hour.' })\r\n        })\r\n        .catch(err => {\r\n            setIsLoading(false);\r\n            if(btnRef.current){\r\n                btnRef.current.removeAttribute('disabled');\r\n            }\r\n            setModalContent({ type: 'Error', content: errorDescription(err) });\r\n        })\r\n    }\r\n\r\n    const confirmMessage = () => {\r\n        history.push('/');\r\n    }\r\n\r\n    return (  \r\n        <div>\r\n            <Banner displayMenu={false} />\r\n            <div className='container'>\r\n                <h1 className='heading'>Forgot Password</h1>\r\n                <Spinner loading={isLoading} />\r\n\r\n                <form className='formFields'>\r\n                    <div className='inputField'>\r\n                        <label>Email</label>\r\n                        <input id='email' type='email' value={email} onChange={e => setEmail(e.target.value)}/>\r\n                    </div>\r\n                    <button className='largeButton' ref={btnRef} onClick={sendEmail}>Reset Password</button>\r\n                </form>\r\n                <div>\r\n                    <p className='footNote'>Don't have an account?&nbsp;\r\n                        <Link to='/register' style={ isLoading ? {pointerEvents: 'none'} : null }>Register</Link>\r\n                    </p><br></br>\r\n                    <p className='footNote'>Already have an account?&nbsp;\r\n                        <Link to='/login' style={ isLoading ? {pointerEvents: 'none'} : null }>Login</Link>\r\n                    </p>\r\n                </div>\r\n\r\n                {modalContent.content !== '' && \r\n                    <Modal \r\n                        showModal={showModal} \r\n                        closeModal={closeModal} \r\n                        modalContent={modalContent} \r\n                        callback={confirmMessage}\r\n                    />\r\n                }            \r\n\r\n            </div>\r\n        </div>        \r\n    );\r\n}\r\n \r\nexport default ForgotPassword;","import axios from 'axios';\r\nimport { LOCAL_STORAGE, API_URL } from '../constants';\r\n\r\nconst useAxios = (token) => {\r\n    if (!token)\r\n        token = localStorage.getItem(LOCAL_STORAGE);\r\n        \r\n    const authAxios = axios.create({\r\n        baseURL: API_URL,\r\n        headers: {\r\n            // Authorization: 'Bearer ' + localStorage.getItem(LOCAL_STORAGE)\r\n            Authorization: 'Bearer ' + token\r\n        }\r\n    })\r\n\r\n    return [authAxios];\r\n}\r\n \r\nexport default useAxios;","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { API_URL, PASSWORD_REGEX } from '../../constants';\r\n\r\n//components\r\nimport Banner from '../banner/Banner';\r\nimport Spinner from '../spinner/Spinner';\r\nimport Modal from '../modal/Modal';\r\n\r\n//hooks\r\nimport useError from '../../hooks/useError';\r\nimport useModal from '../../hooks/useModal';\r\nimport useAxios from '../../hooks/useAxios';\r\n\r\nconst ResetPassword = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [modalContent, setModalContent] = useState({type:'', content: ''});\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [sessionError, setSessionError] = useState('');\r\n\r\n    //hooks\r\n    const history = useHistory();\r\n    const btnRef = useRef();\r\n    const { token } = useParams();\r\n    const [showModal, closeModal] = useModal(modalContent, setModalContent);\r\n    const { errorDescription, sessionExpired } = useError();\r\n    const [authAxios] = useAxios(token);\r\n\r\n    useEffect(() => {\r\n        if (sessionError !== '') \r\n            history.push('/login?err=' + sessionError);\r\n    }, [sessionError]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n\r\n        authAxios.get('/user/')\r\n        .then(res => {\r\n            setEmail(res.data.email);\r\n            setIsLoading(false);\r\n        })\r\n        .catch(err => {\r\n            setIsLoading(false);\r\n            if (sessionExpired(err))\r\n                setSessionError(errorDescription(err));\r\n            else\r\n                setModalContent({ type: 'Error', content: errorDescription(err) });\r\n        })\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const validate = () => {\r\n        if (password.trim() === '') {\r\n            setModalContent({ type: 'Error', content: 'Please enter the new password' });\r\n            return false;\r\n        }\r\n        if (!PASSWORD_REGEX.test(password)) {\r\n            setModalContent({ type: 'Error', content: 'Password must have at least 1 lowercase and 1 uppercase letter, 1 number, 1 special character (!@#$%^&*), and must be at least 8 characters long.' });\r\n            return false;\r\n        }\r\n\r\n        if (confirmPassword.trim() === '') {\r\n            setModalContent({ type: 'Error', content: 'Please confirm the password' });\r\n            return false;\r\n        }\r\n        if (password.trim() !== confirmPassword.trim()) {\r\n            setModalContent({ type: 'Error', content: 'Passwords do not match' });\r\n            return false;\r\n        }\r\n\r\n        setModalContent({type:'', content: ''});\r\n        return true;\r\n    }\r\n\r\n    const handleResetPassword = e => {\r\n        e.preventDefault();\r\n        if(btnRef.current){\r\n            btnRef.current.setAttribute('disabled', 'disabled');\r\n        }\r\n\r\n        if (!validate()) {\r\n            if(btnRef.current){\r\n                btnRef.current.removeAttribute('disabled');\r\n            }\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        authAxios.post(API_URL + '/reset', \r\n        {\r\n            email,\r\n            password\r\n        })\r\n        .then(() => {\r\n            setIsLoading(false);\r\n            history.push('/login');\r\n        })\r\n        .catch(err => {\r\n            setIsLoading(false);\r\n            if(btnRef.current){\r\n                btnRef.current.removeAttribute('disabled');\r\n            }\r\n            if (sessionExpired(err))\r\n                setSessionError(errorDescription(err));\r\n            else\r\n                setModalContent({ type: 'Error', content: errorDescription(err) });\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Banner displayMenu={false} />\r\n            <div className='container'>\r\n                <h1 className='heading'>Reset Password</h1>\r\n                <Spinner loading={isLoading} />\r\n\r\n                <form className='formFields'>\r\n                    <div className='inputField'>\r\n                        <label>New Password</label>\r\n                        <input id='password' type='password' value={password} onChange={e => setPassword(e.target.value)}/>\r\n                    </div>\r\n                    <div className='inputField'>\r\n                        <label>Confirm Password</label>\r\n                        <input id='confirmPassword' type='password' value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)}/>\r\n                    </div>\r\n                    <button className='largeButton' ref={btnRef} onClick={handleResetPassword}>Reset</button>\r\n                </form>\r\n\r\n                {modalContent.content !== '' && <Modal showModal={showModal} closeModal={closeModal} modalContent={modalContent} />}\r\n            </div>\r\n        </div>  \r\n    )\r\n}\r\n export default ResetPassword;","import React, { useState, useEffect, useRef } from 'react';\r\nimport './newRoom.css';\r\n\r\nconst NewRoom = ({createNewRoom, isLoading}) => {\r\n    const [room, setRoom] = useState('');\r\n    const btnRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if(!isLoading) {\r\n            //enable button again\r\n            if(btnRef.current) {\r\n                btnRef.current.removeAttribute('disabled');\r\n            }\r\n        }\r\n    });\r\n\r\n    const handleCreateRoom = e => {\r\n        e.preventDefault();\r\n        //disable button\r\n        if(btnRef.current) {\r\n            btnRef.current.setAttribute('disabled', 'disabled');\r\n        }\r\n\r\n        createNewRoom(room);\r\n        setRoom('');\r\n    }\r\n\r\n    return (  \r\n        <div id=\"newRoomDiv\">\r\n            <form>\r\n                <input id='newRoom' type='text' value={room} onChange={e=>setRoom(e.target.value)} />\r\n                <button className='smallButton' ref={btnRef} onClick={handleCreateRoom}>New Chatroom</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default NewRoom;","import { useState, useEffect, useRef } from 'react';\r\nimport socketIOClient from 'socket.io-client';\r\nimport { BASE_URL, LOCAL_STORAGE } from '../constants';\r\n\r\nconst useSocket = (setSessionError, setNoOfMsgs) => {\r\n    const [room, setRoom] = useState('');\r\n    const [userRooms, setUserRooms] = useState([]);\r\n    const [rooms, setRooms] = useState([]);\r\n    const [members, setMembers] = useState([]);\r\n    const [messages, setMessages] = useState([]);\r\n    const socketRef = useRef();\r\n\r\n  useEffect(() => {\r\n        const token = localStorage.getItem(LOCAL_STORAGE);\r\n        socketRef.current = socketIOClient(BASE_URL, {\r\n            query: {token}\r\n        });\r\n\r\n        socketRef.current.on('error', err => {\r\n            setSessionError(err);\r\n        });\r\n\r\n        socketRef.current.on('loginMember', (email, name) => {\r\n            setMembers(members => {\r\n                let index = members.findIndex( e => e.email === email);\r\n                if ( index !== -1)  \r\n                    return [...members.slice(0, index), \r\n                            {email, name, typing: '', status: 'online'},\r\n                            ...members.slice(index + 1)];\r\n                else\r\n                    return [...members];\r\n\r\n            })\r\n        });\r\n\r\n        socketRef.current.on('setMember', (email, name) => {\r\n            setMembers(members => {\r\n                let index = members.findIndex( e => e.email === email);\r\n                if ( index === -1)  \r\n                    return [...members, {email, name, status: 'online'}];\r\n                else    //if member already enrolled in the room, but was offline, update status to online\r\n                    return [...members.slice(0, index), \r\n                               {email, name, typing: '', status: 'online'},\r\n                            ...members.slice(index + 1)];\r\n            })\r\n        });\r\n\r\n        socketRef.current.on('logoutMember', (email, name) => {\r\n            setMembers(members => {\r\n                let index = members.findIndex( e => e.email === email);\r\n                //if member already enrolled in a room, update status as logged out\r\n                if ( index !== -1)  {\r\n                    return [...members.slice(0, index), \r\n                            {email, name, typing: '', status: ''},\r\n                            ...members.slice(index + 1)];\r\n                }\r\n                else\r\n                    return [...members];\r\n            })\r\n        });\r\n\r\n        socketRef.current.on('typing', (email, name) => {\r\n            setMembers(members => {\r\n                let index = members.findIndex( e => e.email === email);\r\n                //if member already enrolled in a room, update status to typing\r\n                if ( index !== -1)  {\r\n                    let status = members[index].status;\r\n                    return [...members.slice(0, index), \r\n                            {email, name: name, typing: '...', status},\r\n                            ...members.slice(index + 1)];\r\n                }\r\n                else\r\n                    return [...members];\r\n            })\r\n        });\r\n\r\n        socketRef.current.on('stopTyping', (email, name) => {\r\n            setMembers(members => {\r\n                let index = members.findIndex( e => e.email === email);\r\n                //if member already enrolled in a room, update status to typing\r\n                if ( index !== -1)  {\r\n                    let status = members[index].status;\r\n                    return [...members.slice(0, index), \r\n                            {email, name, typing: '', status},\r\n                            ...members.slice(index + 1)];\r\n                }\r\n                else\r\n                    return [...members];\r\n            })\r\n        });\r\n\r\n        socketRef.current.on('showNewMessage', message => {\r\n            setMessages(messages => [...messages, message]);\r\n            if (message.email !== '')\r\n                setNoOfMsgs(prev => prev + 1);\r\n        });\r\n\r\n        socketRef.current.on('deleteMessages', deletedMessages => {\r\n            setMessages(messages => {\r\n                            let msgCopy = messages.map(msg => {\r\n                                //Change the text of all deleted messages\r\n                                if (deletedMessages.includes(msg._id)) {\r\n                                    return ({...msg, name: '', message: 'This message has been deleted', date: '', type: 'txt'});\r\n                                }\r\n                                else\r\n                                    return msg;\r\n                            });\r\n                        return msgCopy;\r\n            });\r\n\r\n            setNoOfMsgs(prev => prev - deletedMessages.length);\r\n        });\r\n\r\n        socketRef.current.on('userRoomAdded', (room) => {\r\n            setUserRooms(rooms => [...rooms, room]);\r\n        });\r\n\r\n        socketRef.current.on('roomAdded', (room) => {\r\n            setRooms(rooms => [...rooms, room]);\r\n        });\r\n\r\n        socketRef.current.on('userRoomDeleted', (roomId) => {\r\n            setUserRooms(rooms => {\r\n                let index = rooms.findIndex( e => e._id === roomId);\r\n                if (index !== -1)  \r\n                    return [...rooms.slice(0, index), \r\n                            ...rooms.slice(index + 1)];\r\n                else\r\n                    return [...rooms]; \r\n            })\r\n        });\r\n\r\n        socketRef.current.on('roomDeleted', (roomId) => {\r\n            setRooms(rooms => {\r\n                let index = rooms.findIndex( e => e._id === roomId);\r\n                if (index !== -1)  \r\n                    return [...rooms.slice(0, index), \r\n                            ...rooms.slice(index + 1)];\r\n                else\r\n                    return [...rooms]; \r\n            })\r\n        });\r\n\r\n        socketRef.current.on('roomNameChange', (roomId, name) => {\r\n            setRoom(name);\r\n            setUserRooms(rooms => {\r\n                let index = rooms.findIndex( e => e._id === roomId);\r\n                if (index !== -1)  \r\n                    return [...rooms.slice(0, index), \r\n                            {...rooms[index], room: name},\r\n                            ...rooms.slice(index + 1)];\r\n                else\r\n                    return [...rooms]; \r\n            });\r\n            setRooms(rooms => {\r\n                let index = rooms.findIndex( e => e._id === roomId);\r\n                if (index !== -1)  \r\n                    return [...rooms.slice(0, index), \r\n                            {...rooms[index], room: name},\r\n                            ...rooms.slice(index + 1)];\r\n                else    \r\n                    return [...rooms];\r\n            })\r\n        });\r\n\r\n        return () => {\r\n            socketRef.current.disconnect();\r\n        };\r\n    }, [setSessionError, setNoOfMsgs]);\r\n\r\n    const broadcastLogin = (email, name) => {\r\n        socketRef.current.emit('login', email, name);\r\n    };\r\n\r\n    const joinRoom = (roomId, email, name) => {\r\n        socketRef.current.emit('joinRoom', roomId, email, name);\r\n    };\r\n\r\n    const leaveRoom = (roomId, name) => {\r\n        return new Promise((resolve) => \r\n            socketRef.current.emit('leaveRoom', roomId, name, () => {\r\n                    resolve();\r\n            })\r\n        )\r\n    };\r\n\r\n    const emitTyping = (roomId, email, name) => {\r\n        socketRef.current.emit('typing', roomId, email, name);\r\n    };\r\n\r\n    const emitStopTyping = (roomId, email, name) => {\r\n        socketRef.current.emit('stopTyping', roomId, email, name);\r\n    };\r\n\r\n    const emitMessage = message => {\r\n        console.log(message)\r\n        return new Promise((resolve, reject) => \r\n            socketRef.current.emit('newMessage', message, error => {\r\n                if (error) \r\n                    reject(error);\r\n                else \r\n                    resolve();\r\n            })\r\n        )\r\n    };\r\n\r\n    const emitClearChat = roomId => {\r\n        return new Promise((resolve, reject) => \r\n            socketRef.current.emit('clearChat', roomId, error => {\r\n                if (error) \r\n                    reject(error);\r\n                else \r\n                    resolve();\r\n            })\r\n        )\r\n    };\r\n\r\n    const emitDeleteMessages = (roomId, messages) => {\r\n        return new Promise((resolve, reject) => \r\n            socketRef.current.emit('deleteMessages', roomId, messages, error => {\r\n                if (error) \r\n                    reject(error);\r\n                else \r\n                    resolve();\r\n            })\r\n        )\r\n    };\r\n\r\n    const emitLogout = (roomId, email, name) => {\r\n        return new Promise((resolve, reject) => \r\n            socketRef.current.emit('logout', roomId, email, name, error => {\r\n                if (error) {\r\n                    reject(error);\r\n                }\r\n                else {\r\n                    localStorage.removeItem(LOCAL_STORAGE);\r\n                    resolve();\r\n                }\r\n            })\r\n        )\r\n    };\r\n\r\n    const broadcastOffline = offline => {\r\n        socketRef.current.emit('offline', offline);\r\n    };\r\n\r\n    const emitNewRoom = (room) => {\r\n        return new Promise((resolve, reject) => \r\n            socketRef.current.emit('addRoom', room, error => {\r\n                if (error) \r\n                    reject(error);\r\n                else \r\n                    resolve();\r\n            })\r\n        )\r\n    };\r\n\r\n    const emitEdittedRoomName = (roomId, room) => {\r\n        return new Promise((resolve, reject) => \r\n            socketRef.current.emit('updateRoomName', roomId, room, error => {\r\n                if (error) \r\n                    reject(error);\r\n                else \r\n                    resolve();\r\n            })\r\n        )\r\n    };\r\n\r\n    const emitDeleteRoom = (roomId) => {\r\n        return new Promise((resolve, reject) => \r\n            socketRef.current.emit('deleteRoom', roomId, error => {\r\n                if (error) \r\n                    reject(error);\r\n                else \r\n                    resolve();\r\n            })\r\n        )\r\n    };\r\n\r\n    const updateProfile = (email, name) => {\r\n        return new Promise((resolve, reject) => \r\n            socketRef.current.emit('updateProfile', email, name, error => {\r\n                if (error) \r\n                    reject(error);\r\n                else \r\n                    resolve();\r\n            })\r\n        )\r\n    };\r\n\r\n    return { room, setRoom, userRooms, setUserRooms, rooms, setRooms, members, setMembers, messages, setMessages, \r\n             broadcastLogin, joinRoom, leaveRoom, emitTyping, emitStopTyping, emitMessage, emitClearChat, emitDeleteMessages, \r\n             emitLogout, broadcastOffline,\r\n             emitNewRoom, emitEdittedRoomName, emitDeleteRoom, updateProfile };\r\n};\r\n\r\nexport default useSocket;","const useNewRoom = (setModalContent, setIsLoading, emitNewRoom) => {\r\n\r\n    const createNewRoom = async (room) => {\r\n        if (room.trim() === '') {\r\n            setModalContent({ type: 'Error', content: 'Please enter a name for the chatroom' });\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        try {\r\n            await emitNewRoom(room);\r\n            setIsLoading(false);\r\n        } catch(err) {\r\n            setIsLoading(false);\r\n            setModalContent({ type: 'Error', content: err });\r\n        }\r\n    }\r\n    \r\n    return [createNewRoom];\r\n}\r\n \r\nexport default useNewRoom;","import { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useLogout = (sessionError, setSessionError, setIsLoading, setModalContent, emitLogout, email, name, roomId) => {\r\n    \r\n    //hooks\r\n    const history = useHistory();\r\n\r\n    if (!roomId)\r\n        roomId = '';\r\n\r\n    useEffect(() => {\r\n        if (sessionError !== '') {\r\n            if (email !== '') {\r\n                //Force user logout\r\n                emitLogout(roomId, email, name)\r\n                .then(() => {\r\n                    history.push('/login?err=' + sessionError);\r\n                })\r\n                .catch(err => {\r\n                    setSessionError('');\r\n                    setIsLoading(false);\r\n                    setModalContent({ type:'Error', content: err });\r\n                })\r\n            }\r\n            else\r\n                history.push('/login?err=' + sessionError);\r\n        }\r\n    }, [sessionError]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const logout = async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            await emitLogout(roomId, email, name);\r\n            setIsLoading(false);\r\n            history.push('/login');\r\n        } catch(err) {\r\n            setIsLoading(false);\r\n            setModalContent({ type: 'Error', content: err });\r\n        }\r\n    }\r\n\r\n    return [logout];\r\n}\r\n \r\nexport default useLogout;","import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport './rooms.css';\r\nimport { LOCAL_STORAGE } from '../../constants';\r\n\r\n//components\r\nimport Banner from '../banner/Banner';\r\nimport Modal from '../modal/Modal';\r\nimport NewRoom from '../newRoom/NewRoom';\r\nimport Spinner from '../spinner/Spinner';\r\n\r\n//hooks\r\nimport useError from '../../hooks/useError';\r\nimport useModal from '../../hooks/useModal';\r\nimport useSocket from '../../hooks/useSocket';\r\nimport useAxios from '../../hooks/useAxios';\r\nimport useNewRoom from '../../hooks/useNewRoom';\r\nimport useLogout from '../../hooks/useLogout';\r\n\r\nconst Rooms = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [modalContent, setModalContent] = useState({type:'', content: ''});\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [sessionError, setSessionError] = useState('');\r\n\r\n    //hooks\r\n    const { errorDescription, sessionExpired } = useError();\r\n    const [authAxios] = useAxios();\r\n    const [showModal, closeModal] = useModal(modalContent, setModalContent);\r\n    const { userRooms, setUserRooms, rooms, setRooms, broadcastLogin, emitLogout, emitNewRoom } = useSocket(setSessionError);\r\n    const [createNewRoom] = useNewRoom(setModalContent, setIsLoading, emitNewRoom);\r\n    const [logout] = useLogout(sessionError, setSessionError,setIsLoading, setModalContent, emitLogout, email, name);\r\n    const history = useHistory();\r\n        \r\n    useEffect(() => {\r\n        if (localStorage.getItem(LOCAL_STORAGE)) {\r\n            setIsLoading(true);\r\n            authAxios.get('/rooms')\r\n            .then(res => {\r\n                setEmail(res.data.email);\r\n                setName(res.data.name);\r\n                setUserRooms(res.data.userRooms);\r\n                setRooms(res.data.rooms);\r\n                broadcastLogin(res.data.email, res.data.name);\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n                if (sessionExpired(err))\r\n                    setSessionError(errorDescription(err));\r\n                else\r\n                    setModalContent({ type: 'Error', content: errorDescription(err) });\r\n            })\r\n        }\r\n        else\r\n            history.push('/login');\r\n            \r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const handleJoinRoom = e => {\r\n        e.persist();\r\n        setIsLoading(true);\r\n        authAxios.put('/rooms/join', \r\n        {\r\n            roomId: e.target.id,\r\n            email\r\n        })\r\n        .then(() => {\r\n            setIsLoading(false);\r\n            history.push('/chat/' + e.target.id);\r\n        }) \r\n        .catch(err => {\r\n            setIsLoading(false);\r\n            if (sessionExpired(err)) \r\n                setSessionError(errorDescription(err));\r\n            else    \r\n                setModalContent({ type: 'Error', content: errorDescription(err) });\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Banner displayMenu={true} name={name} email={email} logout={logout} />\r\n            <div className='roomButtonContainer'> \r\n                <Spinner loading={isLoading} />\r\n                <NewRoom createNewRoom={createNewRoom} isLoading={isLoading}/>\r\n            </div>\r\n            <div className='chatRooms'>\r\n                <div>\r\n                    <div className='subBanner'>My Chatrooms</div>\r\n                    <div className='roomContainer roomGrid'>\r\n                        {userRooms.map( room => \r\n                                <div key={room._id} id={room._id} onClick={handleJoinRoom}>{room.room}</div>\r\n                        )}                        \r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div className='subBanner'>Other Chatrooms</div>\r\n                    <div className='roomContainer roomGrid'>\r\n                        {rooms.map( room => \r\n                            <div key={room._id} id={room._id} onClick={handleJoinRoom}>{room.room}</div>\r\n                        )}                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {modalContent.content !== '' && <Modal showModal={showModal} closeModal={closeModal} modalContent={modalContent} />}\r\n        </div>\r\n    );\r\n}\r\n export default Rooms;","import React from 'react';\r\nimport PulseLoader from \"react-spinners/PulseLoader\";\r\nimport './members.css';\r\n\r\nconst Members = ({ members }) => {\r\n    return (  \r\n        <div id='peopleList'>\r\n            <ul>\r\n                {members ? \r\n                    members.map((e, i) => \r\n                        <li key={i}>\r\n                            <div>{e.name}</div>\r\n                            {e.typing !== '' && <div><PulseLoader size={6} color={'#bfbfbf'} /></div> }\r\n                            {e.status !== '' && <div id='status'></div>}\r\n                        </li>\r\n                    ) \r\n                    : null\r\n                }                        \r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default React.memo(Members);","import React, { useEffect } from 'react';\r\nimport { formatDate } from '../../utils/formatDate';\r\nimport {emojify} from 'react-emojione';\r\nimport { EmojiOptions } from '../../constants';\r\nimport ReactTextFormat from 'react-text-format';\r\nimport './messages.css';\r\n\r\n\r\nconst Messages = ({ messages, email, deleteMessages, checkboxes, handleCheckboxChange }) => {\r\n    \r\n    useEffect(() => {\r\n        const chatDiv = document.getElementById('chats');\r\n        chatDiv.scrollTop = chatDiv.scrollHeight;\r\n    })\r\n\r\n    return (  \r\n        <div id='chats'>\r\n            {messages ? \r\n                messages.map( (msg, i) => \r\n                    <div className='chat' key={msg._id}>\r\n                        {(deleteMessages && msg.email !== '' && msg.name !== '') && \r\n                            <input  type='checkbox' id={msg._id} \r\n                                    className={msg.email === email ? 'myCheckbox' : 'chatCheckbox'} \r\n                                    checked={checkboxes[msg._id]}\r\n                                    onChange={handleCheckboxChange}\r\n                            />\r\n                        }\r\n                        <div className={'message' + (msg.email === email ? ' myMessage' : msg.email === '' ? ' adminMessage' : ' chatMessage')}>\r\n                            {(msg.name !== '' && msg.date !== '') && \r\n                                <p className='credentials'>{msg.name}, {formatDate(msg.date)}</p>                                \r\n                            }\r\n                            <p className={'messageContent' + (msg.name === '' && msg.date === '' ? ' messageDeleted' : '')}>\r\n                                { msg.message.indexOf('base64') !== -1 ?\r\n                                    <img src={msg.message} alt=''/>\r\n                                    : \r\n                                    msg.type === 'video' ?\r\n                                        <video src=\"' + msg.message + '\" width=\"320\" height=\"240\" controls></video>\r\n                                        :\r\n                                        <ReactTextFormat allowedFormats={['URL', 'Email', 'Image']} linkTarget='_blank'>\r\n                                            {emojify(msg.message, EmojiOptions)}\r\n                                        </ReactTextFormat>\r\n                                }\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n                : null\r\n            }                        \r\n        </div>\r\n    );\r\n}\r\n \r\nexport default React.memo(Messages);","export const formatDate = (date) => {\r\n    let today = new Date();\r\n    today.setHours(0,0,0,0);\r\n\r\n    let date2 = new Date(date);\r\n    date2.setHours(0,0,0,0);\r\n\r\n    if(today.valueOf() === date2.valueOf())\r\n        return new Date(date).toLocaleTimeString('en-US');\r\n    else\r\n        return new Date(date).toLocaleString('en-US');\r\n}","import React, { useState, useEffect, useRef, Fragment } from 'react';\r\nimport {emojify} from 'react-emojione';\r\nimport { EmojiOptions } from '../../constants';\r\nimport data from 'emoji-mart/data/apple.json';\r\nimport { NimblePicker } from 'emoji-mart';\r\nimport 'emoji-mart/css/emoji-mart.css';\r\nimport './newMessage.css';\r\n//import ContentEditable from \"react-contenteditable\";\r\n//import ContentEditable from './ContentEditable';\r\n\r\nconst NewMessage = ({ sendMessage, isLoading, handleEmitTyping, handleEmitStopTyping, uploadImage }) => {\r\n    const [message, setMessage] = useState('');\r\n    const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n    const sendBtnRef = useRef();\r\n    const imageFileRef = useRef();\r\n    const imageBtnRef = useRef();\r\n    let typingTimer;\r\n    const timeOut = 1000;\r\n\r\n    useEffect(() => {\r\n        if(!isLoading) {\r\n            //enable send button again\r\n            if(sendBtnRef.current) \r\n                sendBtnRef.current.removeAttribute('disabled');\r\n        }\r\n    });\r\n    \r\n    const handleTyping = (e) => {\r\n        clearTimeout(typingTimer);\r\n        handleEmitTyping();\r\n    }\r\n\r\n    const handleStopTyping = (e) => {\r\n        clearTimeout(typingTimer);\r\n        typingTimer = setTimeout(() => {\r\n            handleEmitStopTyping();\r\n        }, timeOut)\r\n    }\r\n\r\n    const handleSendMessage = e => {\r\n        e.preventDefault();\r\n        //disable button\r\n        if(sendBtnRef.current) {\r\n            sendBtnRef.current.setAttribute('disabled', 'disabled');\r\n        }\r\n\r\n        setShowEmojiPicker(false);\r\n        sendMessage(message);\r\n        setMessage('');\r\n    }\r\n\r\n    const getFileName = e => {\r\n        if (e.target.files[0])\r\n            uploadImage(e.target.files[0]);\r\n    }\r\n\r\n    const handleUploadImage = e => {\r\n        e.preventDefault();\r\n        //force click of the input\r\n        if(imageBtnRef.current) \r\n            imageFileRef.current.click();\r\n    }\r\n\r\n    const addEmoji = emoji => {\r\n        setMessage(prev => prev + emoji.native);\r\n    }\r\n\r\n    return (  \r\n        <div>\r\n            <form id='messageForm'>\r\n                <input id='message' type='text' value={message} \r\n                       onChange={e => setMessage(e.target.value)} \r\n                       onKeyPress={handleTyping}\r\n                       onKeyUp={handleStopTyping}\r\n                       onClick={() => setShowEmojiPicker(false)}/>\r\n\r\n                {/* <ContentEditable id='message' html={message} onBlur={handleBlur} onChange={handleChange} onFocus={() => setShowEmojiPicker(false)}/> */}\r\n\r\n                <button className='icon' ref={sendBtnRef} onClick={handleSendMessage}>\r\n                    <i className=\"fas fa-paper-plane\"></i>\r\n                </button>\r\n\r\n                <input type='file' onChange={getFileName} accept='image/*' style={{display: 'none'}} ref={imageFileRef}/>\r\n                <button className='icon' ref={imageBtnRef} onClick={handleUploadImage}>\r\n                    <i className=\"fas fa-paperclip\"></i>\r\n                </button>\r\n\r\n                {showEmojiPicker ? (\r\n                    <Fragment>\r\n                        <span className='emojiPicker'>\r\n                            <NimblePicker set='apple' data={data}\r\n                                onSelect={addEmoji}\r\n                                perLine={6}\r\n                                emojiSize={20}\r\n                                showPreview={false}\r\n                                showSkinTones={false}\r\n                                />\r\n                        </span>\r\n                        <p className='icon emojiButton' onClick={() => setShowEmojiPicker(false)}>\r\n                            <i className=\"fas fa-keyboard\"></i>\r\n                        </p>\r\n                    </Fragment>\r\n                ) : (\r\n                    <p className='emojiButton' onClick={() => setShowEmojiPicker(true)}>\r\n                        {emojify(':)', EmojiOptions)}\r\n                    </p>\r\n                )}\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default NewMessage;","import { useState } from 'react';\r\n\r\nconst useCheckboxes = (messages) => {\r\n    const [deleteMessages, setDeleteMessages] = useState(false);\r\n    const [selectMessages, setSelectMessages] = useState(false);\r\n    const [checkboxes, setCheckboxes] = useState({});\r\n    \r\n    const showDeleteButtons = () => {\r\n        //show checkboxes next to the messages\r\n        setDeleteMessages(true);\r\n        setCheckboxes( \r\n            messages.filter(msg => msg.email !== '' && msg.name !== '')    //get only user msgs and undeleted msgs\r\n                    .reduce( (boxes, msg) => ({         //initialize all checkboxes to false\r\n                        ...boxes,\r\n                        [msg._id]: false\r\n                    }), {} )\r\n        )\r\n    }\r\n\r\n    const selectCheckboxes = (isSelected) => {         \r\n        //check all the checkboxes next to the messages\r\n        Object.keys(checkboxes).forEach(checkbox => {\r\n            setCheckboxes(prevState => ({\r\n                ...prevState,\r\n                [checkbox]: isSelected\r\n            }) )\r\n        });\r\n    }\r\n\r\n    const handleSelectAll = () => {\r\n        setSelectMessages(true);\r\n        selectCheckboxes(true);\r\n    }\r\n\r\n    const handleDeselectAll = () => {\r\n        setSelectMessages(false);\r\n        selectCheckboxes(false);\r\n    }\r\n\r\n    const handleCancelDelete = () => {\r\n        setDeleteMessages(false);\r\n        selectCheckboxes(false);\r\n    }\r\n\r\n    const handleCheckboxChange = e => {\r\n        let { id } = e.target;\r\n        setCheckboxes(prevState => ({\r\n            ...prevState,\r\n            [id]: !prevState[id]\r\n        }) );\r\n    };\r\n\r\n    const checkboxSelected = () => {         \r\n        //check if a checkbox is selected, filter true values, return true if something is selected\r\n        return Object.values(checkboxes).filter(checkbox => checkbox).length > 0;\r\n    }\r\n\r\n    return [deleteMessages, selectMessages, checkboxes, showDeleteButtons, handleSelectAll, handleDeselectAll, handleCancelDelete, handleCheckboxChange, checkboxSelected] ;\r\n}\r\n \r\nexport default useCheckboxes;\r\n","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport './chat.css';\r\nimport { LOCAL_STORAGE } from '../../constants';\r\n\r\n//components\r\nimport Banner from '../banner/Banner';\r\nimport Modal from '../modal/Modal';\r\nimport Spinner from '../spinner/Spinner';\r\nimport Members from '../members/Members';\r\nimport Messages from '../messages/Messages';\r\nimport NewMessage from '../newMessage/NewMessage';\r\n\r\n//hooks\r\nimport useError from '../../hooks/useError';\r\nimport useModal from '../../hooks/useModal';\r\nimport useSocket from '../../hooks/useSocket';\r\nimport useCheckboxes from '../../hooks/useCheckboxes';\r\nimport useAxios from '../../hooks/useAxios';\r\nimport useLogout from '../../hooks/useLogout';\r\n\r\nconst Chat = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [admin, setAdmin] = useState();\r\n    const [noOfMsgs, setNoOfMsgs] = useState(0);\r\n    const [modalContent, setModalContent] = useState({type:'', content: ''});\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [sessionError, setSessionError] = useState('');\r\n    \r\n    //hooks\r\n    const history = useHistory();\r\n    const { roomId } = useParams();\r\n    const { errorDescription, sessionExpired } = useError();\r\n    const [authAxios] = useAxios();\r\n    const [showModal, closeModal] = useModal(modalContent, setModalContent);\r\n    const { room, setRoom, members, setMembers, messages, setMessages, joinRoom, leaveRoom, emitTyping, emitStopTyping,\r\n            emitMessage, emitClearChat, emitDeleteMessages, emitLogout, broadcastOffline } = useSocket(setSessionError, setNoOfMsgs);\r\n    const [deleteMessages, selectMessages, checkboxes, showDeleteButtons, handleSelectAll, handleDeselectAll, handleCancelDelete, handleCheckboxChange, checkboxSelected] = useCheckboxes(messages);\r\n    const [logout] = useLogout(sessionError, setSessionError, setIsLoading, setModalContent, emitLogout, email, name, roomId);\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(LOCAL_STORAGE)) {\r\n            setIsLoading(true);\r\n            authAxios.get('/chat/' + roomId)\r\n            .then(res => {\r\n                setEmail(res.data.email);\r\n                setName(res.data.name);\r\n                setRoom(res.data.roomData.room);\r\n                setAdmin(res.data.roomData.admin);\r\n                setMembers(res.data.roomData.members);\r\n                setMessages(res.data.roomData.messages);\r\n                setNoOfMsgs(res.data.roomData.messages.length);\r\n                joinRoom(roomId, res.data.email, res.data.name);    //broadcast to all other clients that this member has joined\r\n                if (res.data.offline.length > 0)\r\n                    broadcastOffline(res.data.offline)    //broadcast to all other clients the offline members\r\n                setIsLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n                if (sessionExpired(err))\r\n                    setSessionError(errorDescription(err));\r\n                else\r\n                    setModalContent({ type: 'Error', content: errorDescription(err) });\r\n            })\r\n        }\r\n        else \r\n            history.push('/login');\r\n            \r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const sendMessage = async (message) => {\r\n        if (message.trim() === '') {\r\n            setModalContent({ type: 'Error', content: 'Please enter a message' });\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        try {\r\n            await emitMessage({roomId, email, name, message});\r\n        } catch(err) {\r\n            setModalContent({ type: 'Error', content: err });\r\n        }\r\n        setIsLoading(false);\r\n    }\r\n\r\n    const handleLeaveRoom = async () => {\r\n        try {\r\n            await leaveRoom(roomId, name);\r\n            history.push('/rooms');\r\n        } catch(err) {\r\n            setModalContent({ type: 'Error', content: err });\r\n        }\r\n    }\r\n\r\n    const handleClearChat = () => {\r\n        setModalContent({ type: 'DeleteAll', content: 'This will delete all the messages. Are you sure you want to clear the chat?' });\r\n    }\r\n\r\n    const clearChat = async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            await emitClearChat(roomId);\r\n            setIsLoading(false);\r\n            closeModal();\r\n            setMessages([]);\r\n            setNoOfMsgs(0);\r\n        } catch(err) {\r\n            setIsLoading(false);\r\n            setModalContent({ type: 'Error', content: err });\r\n        }\r\n    }\r\n\r\n    const handleDeleteMessages = () => {\r\n        if (!checkboxSelected())\r\n            setModalContent({ type: 'Error', content: 'Please select the messages to delete' });\r\n        else\r\n            setModalContent({ type: 'Delete', content: 'Are you sure you want to delete the selected messages?' });\r\n    }\r\n\r\n    const deleteSelectedMessages = async () => {\r\n        //convert the msg ids into an array\r\n        let chkboxArr = Object.keys(checkboxes).filter(checkbox => checkboxes[checkbox]);\r\n\r\n        setIsLoading(true);\r\n        try {\r\n            await emitDeleteMessages(roomId, chkboxArr);\r\n            setIsLoading(false);\r\n            closeModal();\r\n            handleCancelDelete();\r\n        } catch(err) {\r\n            setIsLoading(false);\r\n            setModalContent({ type: 'Error', content: err });\r\n        }\r\n    }\r\n\r\n    const handleEmitTyping = () => {\r\n        emitTyping(roomId, email, name);\r\n    }\r\n\r\n    const handleEmitStopTyping = () => {\r\n        emitStopTyping(roomId, email, name);\r\n    }\r\n\r\n    const uploadImage = (imageFile) => {\r\n        console.log(imageFile.type)\r\n        if (!imageFile || (!imageFile.type.match('image.*'))) {\r\n        // && !imageFile.type.match('video.*'))) {\r\n            setModalContent({ type: 'Error', content: 'Please select an image file' });\r\n            return;\r\n        }\r\n\r\n        //Read the file\r\n        let reader = new FileReader();\r\n        reader.addEventListener('load', async () => {\r\n            setIsLoading(true);\r\n            let image = reader.result;\r\n            let imageType = imageFile.type.match('image.*') ? 'image' : 'video';\r\n            try {\r\n                await emitMessage({ roomId, email, name, message: image, type: imageType });\r\n            } catch(err) {\r\n                setModalContent({ type: 'Error', content: err });\r\n            }\r\n            setIsLoading(false);\r\n        });\r\n        reader.readAsDataURL(imageFile);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Banner  displayMenu={true} name={name} email={email} logout={logout} roomId={roomId} />\r\n            <div id='topContainer'>\r\n                <div id='spinnerContainer'>\r\n                    <Spinner loading={isLoading} />\r\n                </div>\r\n\r\n                <div id='chatButtonContainer'>\r\n                    {deleteMessages ?\r\n                        <Fragment>\r\n                            <div className='leftButtons'>\r\n                                {!selectMessages ?\r\n                                    <button className='icon' onClick={handleSelectAll} title='Select All'>\r\n                                        <i className='far fa-square'></i>    \r\n                                    </button>\r\n                                :\r\n                                    <button className='icon' onClick={handleDeselectAll} title='Deselect All'>\r\n                                        <i className='far fa-check-square'></i>        \r\n                                    </button>\r\n                                }\r\n                                <button className='icon' onClick={handleDeleteMessages} title='Delete Messages'>\r\n                                    <i className='fas fa-trash-alt'></i>\r\n                                </button>\r\n                                <button className='icon' onClick={handleCancelDelete} title='Cancel'>\r\n                                    <i className='fas fa-times'></i>\r\n                                </button>\r\n                           </div>\r\n                        </Fragment>\r\n                        : (admin === email && noOfMsgs > 0) ? \r\n                            <Fragment>\r\n                                <div className='leftButtons'>\r\n                                    <button className='icon' onClick={handleClearChat} title='Clear Chat'>\r\n                                        <i className='fas fa-comment-slash'></i>\r\n                                    </button>\r\n                                    <button className='icon' onClick={showDeleteButtons} title='Delete Messages'>\r\n                                        <i className='fas fa-trash-alt'></i>\r\n                                    </button>\r\n                                </div>\r\n                            </Fragment>\r\n                            : null\r\n                    }\r\n                    <div className='rightButtons'>\r\n                            <button className='icon' onClick={handleLeaveRoom} title='Leave Room'>\r\n                                <i id='leaveIcon' className='fas fa-sign-out-alt fa-rotate-180'></i>\r\n                            </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div id='chatroomContent'>\r\n                <div id='sidePanel'>\r\n                    <div id='room'>Room: <span id='roomName'>{room}</span></div>\r\n                    <p id='subHeading'>People in chatroom</p>\r\n                    <Members members={members} />\r\n                </div>\r\n                <div id='chatContainer'>\r\n                    <Messages \r\n                        messages={messages} \r\n                        email={email} \r\n                        deleteMessages={deleteMessages} \r\n                        checkboxes={checkboxes}\r\n                        handleCheckboxChange={handleCheckboxChange}                            \r\n                    />\r\n                    <NewMessage sendMessage={sendMessage} isLoading={isLoading} \r\n                                handleEmitTyping={handleEmitTyping} handleEmitStopTyping={handleEmitStopTyping}\r\n                                uploadImage={uploadImage}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {modalContent.content !== '' && \r\n                <Modal \r\n                    showModal={showModal} \r\n                    closeModal={closeModal} \r\n                    modalContent={modalContent} \r\n                    callback={modalContent.type === 'DeleteAll' ? clearChat : deleteSelectedMessages}\r\n                />\r\n            }            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { LOCAL_STORAGE } from '../../constants';\r\n\r\n//components\r\nimport Banner from '../banner/Banner';\r\nimport Spinner from '../spinner/Spinner';\r\nimport Modal from '../modal/Modal';\r\n\r\n//hooks\r\nimport useError from '../../hooks/useError';\r\nimport useModal from '../../hooks/useModal';\r\nimport useSocket from '../../hooks/useSocket';\r\nimport useAxios from '../../hooks/useAxios';\r\nimport useLogout from '../../hooks/useLogout';\r\n\r\nconst UpdateProfile = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [modalContent, setModalContent] = useState({type:'', content: ''});\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [sessionError, setSessionError] = useState('');\r\n\r\n    //hooks\r\n    const btnRef = useRef();\r\n    const history = useHistory();\r\n    const { roomId } = useParams();\r\n    const [showModal, closeModal] = useModal(modalContent, setModalContent);\r\n    const { errorDescription, sessionExpired } = useError();\r\n    const { leaveRoom, updateProfile, emitLogout } = useSocket(setSessionError);\r\n    const [authAxios] = useAxios();\r\n    const [logout] = useLogout(sessionError, setSessionError, setIsLoading, setModalContent, emitLogout, email, name);    \r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(LOCAL_STORAGE)) {\r\n            setIsLoading(true);\r\n            authAxios.get('/user/')\r\n            .then(res => {\r\n                setEmail(res.data.email);\r\n                setName(res.data.name);\r\n                setIsLoading(false);\r\n                // if arriving from a chat room, send msg of client leaving to that room\r\n                if (roomId)\r\n                    leaveRoom(roomId, res.data.name);\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n                if (sessionExpired(err)) {\r\n                    setSessionError(errorDescription(err));\r\n                }\r\n                else\r\n                    setModalContent({ type: 'Error', content: errorDescription(err) });\r\n            })\r\n        }\r\n        else\r\n            history.push('/login');\r\n\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const validate = () => {\r\n        if (name.trim() === '') {\r\n            setModalContent({ type: 'Error', content: 'Please enter your name' });\r\n            return false;\r\n        }\r\n\r\n        setModalContent({type:'', content: ''});\r\n        return true;\r\n    }\r\n\r\n    const handleUpdate = async (e) => {\r\n        e.preventDefault();\r\n        if(btnRef.current){\r\n            btnRef.current.setAttribute('disabled', 'disabled');\r\n        }\r\n\r\n        if (!validate()) {\r\n            if(btnRef.current){\r\n                btnRef.current.removeAttribute('disabled');\r\n            }\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        try {\r\n            await updateProfile(email, name);\r\n            setIsLoading(false);\r\n            history.goBack();\r\n        } catch(err) {\r\n            setIsLoading(false);\r\n            if(btnRef.current){\r\n                btnRef.current.removeAttribute('disabled');\r\n            }\r\n            setModalContent({ type: 'Error', content: err });\r\n        }\r\n    }\r\n\r\n    const goBack = e => {\r\n        e.preventDefault();\r\n        history.goBack();\r\n    }\r\n\r\n    return (  \r\n        <div>\r\n            <Banner displayMenu={true} name={name} email={email} logout={logout} />\r\n            <div className='container'>\r\n                <h1 className='heading'>Update Profile</h1>\r\n                <Spinner loading={isLoading} />\r\n\r\n                <form className='formFields'>\r\n                    <div className='inputField'>\r\n                        <label>Email: {email}</label>\r\n                    </div>\r\n                    <div className='inputField'>\r\n                        <label>Name</label>\r\n                        <input id='name' type='text' value={name} onChange={e => setName(e.target.value)}/>\r\n                    </div>\r\n                    <div className='buttonContainer'>\r\n                        <button className='largeButton' onClick={goBack}>&lt;&lt; Back</button>\r\n                        <button className='largeButton' ref={btnRef} onClick={handleUpdate}>Update</button>\r\n                    </div>\r\n                </form>\r\n\r\n                {modalContent.content !== '' && <Modal showModal={showModal} closeModal={closeModal} modalContent={modalContent} />}\r\n            </div>\r\n        </div>          \r\n    );\r\n}\r\n \r\nexport default UpdateProfile;","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { PASSWORD_REGEX } from '../../constants';\r\n\r\n//components\r\nimport Banner from '../banner/Banner';\r\nimport Spinner from '../spinner/Spinner';\r\nimport Modal from '../modal/Modal';\r\n\r\n//hooks\r\nimport useError from '../../hooks/useError';\r\nimport useModal from '../../hooks/useModal';\r\nimport useAxios from '../../hooks/useAxios';\r\nimport useSocket from '../../hooks/useSocket';\r\nimport useLogout from '../../hooks/useLogout';\r\n\r\nconst ChangePassword = () => {\r\n    const [oldPassword, setOldPassword] = useState('');\r\n    const [newPassword, setNewPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [modalContent, setModalContent] = useState({type:'', content: ''});\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [sessionError, setSessionError] = useState('');\r\n\r\n    //hooks\r\n    const btnRef = useRef();\r\n    const history = useHistory();\r\n    const { email, name, roomId } = useParams();\r\n    const [showModal, closeModal] = useModal(modalContent, setModalContent);\r\n    const { errorDescription, sessionExpired } = useError();\r\n    const [authAxios] = useAxios();\r\n    const { emitLogout, leaveRoom } = useSocket(setSessionError);\r\n    const [logout] = useLogout(sessionError, setSessionError, setIsLoading, setModalContent, emitLogout, email, name);\r\n\r\n\r\n    useEffect(() => {\r\n        // if arriving from a chat room, send msg of client leaving to that room\r\n        if (roomId)\r\n            leaveRoom(roomId, name);\r\n    }, [roomId, name, leaveRoom])\r\n\r\n    const validate = () => {\r\n        if (oldPassword.trim() === '') {\r\n            setModalContent({ type: 'Error', content: 'Please enter the old password' });\r\n            return false;\r\n        }\r\n\r\n        if (newPassword.trim() === '') {\r\n            setModalContent({ type: 'Error', content: 'Please enter the new password' });\r\n            return false;\r\n        }\r\n        if (!PASSWORD_REGEX.test(newPassword)) {\r\n            setModalContent({ type: 'Error', content: 'Password must have at least 1 lowercase and 1 uppercase letter, 1 number, 1 special character (!@#$%^&*), and must be at least 8 characters long.' });\r\n            return false;\r\n        }\r\n\r\n        if (confirmPassword.trim() === '') {\r\n            setModalContent({ type: 'Error', content: 'Please confirm the new password' });\r\n            return false;\r\n        }\r\n        if (newPassword.trim() !== confirmPassword.trim()) {\r\n            setModalContent({ type: 'Error', content: 'Passwords do not match' });\r\n            return false;\r\n        }\r\n\r\n        setModalContent({type:'', content: ''});\r\n        return true;\r\n    }\r\n\r\n    const handleChangePassword = e => {\r\n        e.preventDefault();\r\n        if(btnRef.current){\r\n            btnRef.current.setAttribute('disabled', 'disabled');\r\n        }\r\n\r\n        if (!validate()) {\r\n            if(btnRef.current){\r\n                btnRef.current.removeAttribute('disabled');\r\n            }\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        authAxios.put('/changePassword', \r\n        {\r\n            email,\r\n            oldPassword,\r\n            newPassword\r\n        })\r\n        .then(() => {\r\n            setIsLoading(false);\r\n            history.goBack();\r\n        })\r\n        .catch(err => {\r\n            setIsLoading(false);\r\n            if(btnRef.current){\r\n                btnRef.current.removeAttribute('disabled');\r\n            }\r\n            if (sessionExpired(err))\r\n                setSessionError(errorDescription(err));\r\n            else    \r\n                setModalContent({ type: 'Error', content: errorDescription(err) });\r\n        })\r\n    }\r\n\r\n    const goBack = e => {\r\n        e.preventDefault();\r\n        history.goBack();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Banner displayMenu={true} name={name} email={email} logout={logout} />\r\n            <div className='container'>\r\n                <h1 className='heading'>Change Password</h1>\r\n                <Spinner loading={isLoading} />\r\n\r\n                <form className='formFields'>\r\n                <div className='inputField'>\r\n                        <label>Email: {email}</label>\r\n                    </div>\r\n                    <div className='inputField'>\r\n                        <label>Old Password</label>\r\n                        <input id='oldPassword' type='password' value={oldPassword} onChange={e => setOldPassword(e.target.value)}/>\r\n                    </div>\r\n                    <div className='inputField'>\r\n                        <label>New Password</label>\r\n                        <input id='newPassword' type='password' value={newPassword} onChange={e => setNewPassword(e.target.value)}/>\r\n                    </div>\r\n                    <div className='inputField'>\r\n                        <label>Confirm Password</label>\r\n                        <input id='confirmPassword' type='password' value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)}/>\r\n                    </div>\r\n                    <div className='buttonContainer'>\r\n                        <button className='largeButton' onClick={goBack}>&lt;&lt; Back</button>\r\n                        <button className='largeButton' ref={btnRef} onClick={handleChangePassword}>Change</button>\r\n                    </div>\r\n                </form>\r\n\r\n                {modalContent.content !== '' && <Modal showModal={showModal} closeModal={closeModal} modalContent={modalContent} />}\r\n            </div>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default ChangePassword;","import React, { useEffect, useState, Fragment } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { LOCAL_STORAGE } from '../../constants';\r\nimport './manageRooms.css';\r\n\r\n//components\r\nimport Banner from '../banner/Banner';\r\nimport Modal from '../modal/Modal';\r\nimport NewRoom from '../newRoom/NewRoom';\r\nimport Spinner from '../spinner/Spinner';\r\n\r\n//hooks\r\nimport useError from '../../hooks/useError';\r\nimport useModal from '../../hooks/useModal';\r\nimport useSocket from '../../hooks/useSocket';\r\nimport useAxios from '../../hooks/useAxios';\r\nimport useLogout from '../../hooks/useLogout';\r\nimport useNewRoom from '../../hooks/useNewRoom';\r\n\r\nconst ManageRooms = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [selectedRoomId, setSelectedRoomId] = useState('');\r\n    const [modalContent, setModalContent] = useState({type:'', content: ''});\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [sessionError, setSessionError] = useState('');\r\n    const [edit, setEdit] = useState(false);\r\n    const [editedRoom, setEditedRoom] = useState('');\r\n\r\n    //hooks\r\n    const history = useHistory();\r\n    let { roomId } = useParams();\r\n    const { errorDescription, sessionExpired } = useError();\r\n    const [authAxios] = useAxios();\r\n    const [showModal, closeModal] = useModal(modalContent, setModalContent);\r\n    const { userRooms, setUserRooms, emitLogout, leaveRoom, emitNewRoom, emitEdittedRoomName, emitClearChat, emitDeleteRoom } = useSocket(setSessionError);\r\n    const [createNewRoom] = useNewRoom(setModalContent, setIsLoading, emitNewRoom);\r\n    const [logout] = useLogout(sessionError, setSessionError,setIsLoading, setModalContent, emitLogout, email, name);\r\n        \r\n    useEffect(() => {\r\n        if (localStorage.getItem(LOCAL_STORAGE)) {\r\n            setIsLoading(true);\r\n            authAxios.get('/userRooms')\r\n            .then(res => {\r\n                setEmail(res.data.email);\r\n                setName(res.data.name);\r\n                setUserRooms(res.data.userRooms);\r\n                setIsLoading(false);\r\n                // if arriving from a chat room, send msg of client leaving to that room\r\n                if (roomId) {\r\n                    leaveRoom(roomId, res.data.name);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                setIsLoading(false);\r\n                if (sessionExpired(err))\r\n                    setSessionError(errorDescription(err));\r\n                else\r\n                    setModalContent({ type: 'Error', content: errorDescription(err) });\r\n            })\r\n        }\r\n        else\r\n            history.push('/login');\r\n            \r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const clearEdit = () => {\r\n        setEdit(false);\r\n        setEditedRoom('');\r\n        setSelectedRoomId('');\r\n    }\r\n\r\n    const handleEditRoom = (i) => {\r\n        setEdit(true);\r\n        setSelectedRoomId(i);\r\n        setEditedRoom(userRooms[i].room);\r\n    }\r\n\r\n    const handleCancelEdit = (e) => {\r\n        e.preventDefault();\r\n        clearEdit();\r\n    }\r\n\r\n    const handleSaveRoom = async (e) => {\r\n        e.preventDefault();\r\n        if (editedRoom.trim() === '') {\r\n            setModalContent({ type: 'Error', content: 'Please enter a name for the chatroom' });\r\n            return;\r\n        }\r\n\r\n        //no changes made to room name\r\n        if (editedRoom.trim() === userRooms[selectedRoomId].room) {\r\n            clearEdit();\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        try {\r\n            await emitEdittedRoomName(userRooms[selectedRoomId]._id, editedRoom);\r\n            setIsLoading(false);\r\n            clearEdit();\r\n        } catch(err) {\r\n            setIsLoading(false);\r\n            setModalContent({ type: 'Error', content: err });\r\n        }\r\n    }\r\n\r\n    const handleClearChat = (i) => {\r\n        setEdit(false);\r\n        setEditedRoom('');\r\n        setSelectedRoomId(i);\r\n        setModalContent({ type: 'DeleteAll', content: 'This will delete all the messages. Are you sure you want to clear the chat?' });\r\n    }\r\n\r\n    const clearChat = async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            await emitClearChat(userRooms[selectedRoomId]._id);\r\n            setIsLoading(false);\r\n            setSelectedRoomId('');\r\n            closeModal();\r\n            setModalContent({ type: 'Information', content: 'Chat cleared.' });\r\n        } catch(err) {\r\n            console.log(err)\r\n            setIsLoading(false);\r\n            setModalContent({ type: 'Error', content: err });\r\n        }\r\n    }\r\n\r\n    const handleDeleteRoom = (i) => {\r\n        setEdit(false);\r\n        setEditedRoom('');\r\n        setSelectedRoomId(i);\r\n        setModalContent({ type: 'Delete', content: 'This will delete all the messages and all member subscriptions to this room. Are you sure you want to delete this room?' });\r\n    }\r\n\r\n    const deleteRoom = async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            await emitDeleteRoom(userRooms[selectedRoomId]._id);\r\n            setIsLoading(false);\r\n            setSelectedRoomId('');\r\n            closeModal();\r\n        } catch(err) {\r\n            setIsLoading(false);\r\n            setModalContent({ type: 'Error', content: err });\r\n        }\r\n    }\r\n\r\n    const goBack = e => {\r\n        e.preventDefault();\r\n        history.goBack();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Banner displayMenu={true} name={name} email={email} logout={logout} />\r\n            <div className='roomButtonContainer'> \r\n                <Spinner loading={isLoading} /> \r\n                <NewRoom createNewRoom={createNewRoom} isLoading={isLoading}/>\r\n            </div>\r\n            <div className='chatRooms'>\r\n                <div>\r\n                    <div className='subBanner'>My Chatrooms</div>\r\n                    <div className='roomContainer'>\r\n                        {userRooms.map( (room, i) => \r\n                            <div className='roomItem' key={room._id}>\r\n                                {edit && selectedRoomId === i ?\r\n                                    <Fragment>\r\n                                        <input type='text' value={editedRoom} onChange={e => setEditedRoom(e.target.value)}/>\r\n                                        <div>\r\n                                            <button className='icon' onClick={handleSaveRoom} title='Save'>\r\n                                                <i id='saveIcon' className='fas fa-check'></i>\r\n                                            </button>\r\n                                            <button className='icon' onClick={handleCancelEdit} title='Cancel'>\r\n                                                <i id='cancelIcon' className='fas fa-times'></i>\r\n                                            </button>\r\n                                        </div>\r\n                                    </Fragment>\r\n                                    :\r\n                                    <Fragment>\r\n                                        <div id={room._id}>{room.room}</div>\r\n                                        <div>\r\n                                            <button className='icon' onClick={() => handleEditRoom(i)} title='Edit Room'>\r\n                                                <i className='fas fa-pencil-alt'></i>\r\n                                            </button>\r\n                                            <button className='icon' onClick={() => handleClearChat(i)} title='Clear Chat'>\r\n                                                <i className='fas fa-comment-slash'></i>\r\n                                            </button>\r\n                                            <button className='icon' onClick={() => handleDeleteRoom(i)} title='Delete Room'>\r\n                                                <i className='fas fa-trash-alt'></i>\r\n                                            </button>\r\n                                        </div>\r\n                                    </Fragment>\r\n                                }\r\n                            </div>                  \r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <button className='largeButton' onClick={goBack}>&lt;&lt; Back</button>\r\n\r\n            {modalContent.content !== '' && \r\n                <Modal \r\n                    showModal={showModal} \r\n                    closeModal={closeModal} \r\n                    modalContent={modalContent} \r\n                    callback={modalContent.type === 'DeleteAll' ? clearChat : modalContent.type === 'Delete' ? deleteRoom : closeModal}\r\n                />\r\n            }            \r\n        </div>\r\n    );\r\n}\r\n export default ManageRooms;","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div className='container'>\r\n            <h1 className='heading'>Sorry, page not found</h1>\r\n        </div>\r\n    );\r\n}\r\n export default NotFound;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n//components\nimport Home from './components/home/Home';\nimport Login from './components/login/Login';\nimport Register from './components/register/Register';\nimport ForgotPassword from './components/forgotPassword/ForgotPassword';\nimport ResetPassword from './components/resetPassword/ResetPassword';\nimport Rooms from './components/rooms/Rooms';\nimport Chat from './components/chat/Chat';\nimport UpdateProfile from './components/updateProfile/UpdateProfile';\nimport ChangePassword from './components/changePassword/ChangePassword';\nimport ManageRooms from './components/manageRooms/ManageRooms';\nimport NotFound from './components/notFound/NotFound';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div>\n        <Switch>\n          <Route exact path='/'><Home /></Route>\n          <Route path='/login'><Login /></Route>\n          <Route path='/register'><Register /></Route>\n          <Route path='/forgotPassword'><ForgotPassword /></Route>\n          <Route path='/resetPassword/:token'><ResetPassword /></Route>\n          <Route path='/rooms'><Rooms /></Route>\n          <Route path='/chat/:roomId'><Chat /></Route>\n          <Route path='/updateProfile/:roomId?'><UpdateProfile /></Route>\n          <Route path='/changePassword/:email/:name/:roomId?'><ChangePassword /></Route>\n          <Route path='/manageRooms/:roomId?'><ManageRooms /></Route>\n          <Route><NotFound /></Route>\n        </Switch>    \n      </div>\n    </Router>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}